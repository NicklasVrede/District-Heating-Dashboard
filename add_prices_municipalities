import json
import pandas as pd
import geopandas as gpd
import glob

# Load municipalities GeoJSON
municipalities_gdf = gpd.read_file('maps/municipalities_with_forsyid.geojson')

# Load plants CSV
plants_df = pd.read_csv('data/plants.csv')

# Create a mapping from forsyid to CVRP
forsyid_to_cvrp = {}
for index, row in plants_df.iterrows():
    forsyid = str(row['forsyid']).strip()  # Ensure forsyid is a string and stripped of whitespace
    cvrp = row['CVRP']
    if forsyid and cvrp:  # Ensure both forsyid and CVRP are not None
        forsyid_to_cvrp[forsyid] = cvrp

# Debugging: Print the mapping
print("Forsyid to CVRP mapping:", forsyid_to_cvrp)

# Create a dictionary to hold CVRPs grouped by lau_1
cvrp_by_lau1 = {}
for index, row in municipalities_gdf.iterrows():
    lau_1 = row['lau_1']
    forsyids = row['forsyids'].split(', ')  # Assuming forsyids are stored as a comma-separated string
    forsyids = [fid.strip() for fid in forsyids]  # Clean up whitespace
    forsyids = [str(fid) for fid in forsyids]  # Ensure all forsyids are strings

    # Debugging: Print the forsyids being processed
    print(f"Lau_1: {lau_1}, Forsyids: {forsyids}")

    cvrps = [forsyid_to_cvrp[fid] for fid in forsyids if fid in forsyid_to_cvrp]
    
    # Debugging: Print the collected CVRPs for each lau_1
    print(f"Lau_1: {lau_1}, Forsyids: {forsyids}, CVRPs: {cvrps}")
    
    if lau_1 not in cvrp_by_lau1:
        cvrp_by_lau1[lau_1] = []
    cvrp_by_lau1[lau_1].extend(cvrps)

# Load price data from CSV files
price_files = glob.glob('data/prices/*.csv')
cvrp_to_prices = {}

for file in price_files:
    price_df = pd.read_csv(file, sep=';')  # Adjust separator if necessary
    print(f"Columns in {file}: {price_df.columns.tolist()}")  # Print columns for debugging
    if 'PNummer' not in price_df.columns:
        print(f"'PNummer' column not found in {file}. Available columns: {price_df.columns.tolist()}")
        continue  # Skip this file if 'PNummer' is not found

    for index, row in price_df.iterrows():
        pnummer = row['PNummer']  # Use 'PNummer' as the CVRP equivalent
        mwh_price = pd.to_numeric(row['MWhPrisInklMoms'], errors='coerce')  # Convert to numeric
        beboelseslejlighed_price = pd.to_numeric(row['SamletForbugerprisBeboelseslejlighedInklMoms'], errors='coerce')  # Convert to numeric
        enfamilieshus_price = pd.to_numeric(row['SamletForbugerprisEnfamilieshusInklMoms'], errors='coerce')  # Convert to numeric
        
        if pnummer not in cvrp_to_prices:
            cvrp_to_prices[pnummer] = {
                'mwh_prices': [],
                'beboelseslejlighed_prices': [],
                'enfamilieshus_prices': []
            }
        
        cvrp_to_prices[pnummer]['mwh_prices'].append(mwh_price)
        cvrp_to_prices[pnummer]['beboelseslejlighed_prices'].append(beboelseslejlighed_price)
        cvrp_to_prices[pnummer]['enfamilieshus_prices'].append(enfamilieshus_price)

# Calculate average prices for each lau_1
average_prices_by_lau1 = {}
for lau_1, cvrps in cvrp_by_lau1.items():
    prices = []
    beboelseslejlighed_prices = []
    enfamilieshus_prices = []
    
    for cvrp in cvrps:
        if cvrp in cvrp_to_prices:
            prices.extend(cvrp_to_prices[cvrp]['mwh_prices'])
            beboelseslejlighed_prices.extend(cvrp_to_prices[cvrp]['beboelseslejlighed_prices'])
            enfamilieshus_prices.extend(cvrp_to_prices[cvrp]['enfamilieshus_prices'])
    
    if prices:
        average_price = sum(prices) / len(prices)
        average_prices_by_lau1[lau_1] = {
            'average_mwh_price': average_price,
            'average_beboelseslejlighed_price': sum(beboelseslejlighed_prices) / len(beboelseslejlighed_prices) if beboelseslejlighed_prices else 0,
            'average_enfamilieshus_price': sum(enfamilieshus_prices) / len(enfamilieshus_prices) if enfamilieshus_prices else 0
        }

# Debugging: Print the average prices by lau_1
print("Average prices by lau_1:", average_prices_by_lau1)

